method 2: 2942.00 Âµs/# 1 # 339.90 #/sec 2.942 net-ms
<g:grammar xmlns:g="http://www.w3.org/2001/03/XPath/grammar">
    <!-- ====================== Meta Information ==================== -->
    <!-- SJB grammar2spec.xsl seems to pick the first of these to create anchor names -->
    <g:language id="xpath1" display-name="XPath 1.0" if="xpath1"/>
    <!-- g:language id="xslt1-patterns" display-name="XSLT 1.0 Match Patterns" if="xpath1"/ -->
    <!-- ====================== Entry Point Information ==================== -->
    <g:start name="ExprSingle" state="DEFAULT" if="xpath1"/>
    <!-- ====================== Grammar Productions ==================== -->
    <!-- [ start XSLT Patterns -->
    <!-- ] end XSLT Patterns -->
    <!-- ===================================================================== -->
    <!-- The QueryList production is  not in the official grammar,
       and is not shown in the bnf.  It is here only for the purpose
       of testing a series of queries.
    -->
    <!-- ### Use the name="" names instead of Expr_1() for generated .jj code -->
    <!--
VersionDecl ::= "xquery" (("encoding" StringLiteral) | ("version" StringLiteral
("encoding" StringLiteral)?)) Separator
-->
    <!-- [ start Prolog -->
    <!-- [ start Setter -->
    <!-- ] end Setter -->
    <!-- [ start Import -->
    <!-- ] end Import -->
    <!-- ] end Prolog -->
    <g:production name="ExprSingle" node-type="void">
        <g:choice break="true" name="ExprSingleChoice">
            <g:ref name="OrExpr"/>
        </g:choice>
    </g:production>
    <!-- [ XPath has ForExpr and (in 2.1) LetExpr -->
    <!-- ] end ForExpr + LetExpr -->
    <!-- [ XQuery has FLWORExpr -->
    <!-- ] end FLWORExpr -->
    <!-- [ start TryCatchExpr -->
    <!--
    TryCatchExpr ::= TryClause CatchClause+
    TryClause ::= "try" "{" TargetExpr "}"
    CatchClause ::= "catch" CatchErrorList "{" Expr "}"
    CatchErrorList ::= (NameTest ("|" NameTest)*)
ErrorCode ::= "$" VarName
ErrorDescr ::= "$" VarName
ErrorVal ::= "$" VarName
-->
    <!-- ] end TryCatchExpr -->
    <!-- [ start OrExpr etc -->
    <g:exprProduction name="OperatorExpr" node-type="void">
        <g:level>
            <g:binary name="OrExpr" condition="&gt; 1">
                <g:string>or</g:string>
            </g:binary>
        </g:level>
        <g:level>
            <g:binary name="AndExpr" condition="&gt; 1">
                <g:string>and</g:string>
            </g:binary>
        </g:level>
        <g:level if="xpath1">
            <g:binary name="EqualityExpr" prefix-seq-type="*">
                <g:choice>
                    <g:string>=</g:string>
                    <g:string>!=</g:string>
                </g:choice>
            </g:binary>
        </g:level>
        <g:level if="xpath1">
            <g:binary name="RelationalExpr" prefix-seq-type="*">
                <g:choice>
                    <g:ref name="LeftAngleBracket" token-user-action="/* Careful! */ token_source.SwitchTo(DEFAULT); token_source.stateStack.pop(); "/>
                    <g:string>&gt;</g:string>
                    <g:string>&lt;=</g:string>
                    <g:string>&gt;=</g:string>
                </g:choice>
            </g:binary>
        </g:level>
        <g:level/>
        <g:level/>
        <g:level/>
        <g:level>
            <g:binary name="AdditiveExpr" not-if="xcore" condition="&gt; 1">
                <g:choice name="AdditiveOps">
                    <g:ref name="Plus"/>
                    <g:ref name="Minus"/>
                </g:choice>
            </g:binary>
        </g:level>
        <g:level>
            <g:binary name="MultiplicativeExpr" not-if="xcore" condition="&gt; 1">
                <g:choice name="MultiplicativeOps">
                    <g:string>*</g:string>
                    <g:string>div</g:string>
                    <g:string>mod</g:string>
                </g:choice>
            </g:binary>
        </g:level>
        <g:level/>
        <g:level/>
        <g:level/>
        <g:level/>
        <g:level/>
        <g:level/>
        <g:level node-type="UnaryExpr" level-user-action="boolean keepUnary=false;">
            <g:prefix name="UnaryExpr" not-if="xcore" condition="keepUnary" prefix-seq-type="*">
                <g:choice name="UnaryExprOps">
                    <g:ref name="Minus" token-user-action="keepUnary=true;"/>
                </g:choice>
            </g:prefix>
        </g:level>
        <g:level if="xpath1">
            <g:binary name="UnionExpr1">
                <g:string>|</g:string>
            </g:binary>
        </g:level>
        <g:level>
            <g:primary name="ValueExpr">
                <g:choice name="ValueExprChoices">
                    <g:sequence lookahead="2" if="xpath1">
                        <g:ref name="FilterExpr"/>
                        <g:optional>
                            <g:choice>
                                <g:ref name="Slash"/>
                                <g:ref name="SlashSlash"/>
                            </g:choice>
                            <g:ref name="RelativePathExpr"/>
                        </g:optional>
                    </g:sequence>
                    <g:ref name="PathExpr" not-if="xcore xpath30 xquery30"/>
                </g:choice>
            </g:primary>
        </g:level>
    </g:exprProduction>
    <!-- ] end OrExpr etc -->
    <!-- [ start PathExpr -->
    <g:production name="PathExpr" xgc-id="leading-lone-slash" not-if="xcore">
        <g:choice break="true" name="PathExprChoices">
            <g:sequence>
                <g:ref name="Slash"/>
                <!-- tell the parser to shutup with lookahead="(1)" for "/ * /*" vs. "/*/*" -->
                <g:optional name="OptionalRootExprTail" lookahead="1">
                    <g:ref name="RelativePathExpr"/>
                </g:optional>
            </g:sequence>
            <g:sequence>
                <g:ref name="SlashSlash"/>
                <g:ref name="RelativePathExpr"/>
            </g:sequence>
            <g:ref name="RelativePathExpr"/>
        </g:choice>
    </g:production>
    <g:production name="RelativePathExpr" not-if="xcore" node-type="void">
        <g:ref name="StepExpr"/>
        <g:zeroOrMore name="RelativePathExprTail">
            <g:choice name="RelativePathExprStepSep">
                <g:ref name="Slash"/>
                <g:ref name="SlashSlash"/>
            </g:choice>
            <g:ref name="StepExpr"/>
        </g:zeroOrMore>
    </g:production>
    <g:production name="StepExpr" node-type="void">
        <g:choice name="AxisOrFilterStep">
            <!-- Need to look ahead 3 here for computed constructors: "element div {baz}" vs "element div baz". -->
            <g:ref name="AxisStep"/>
            <g:ref name="ContextItemExpr" if="xpath1"/>
            <g:ref name="AbbrevReverseStep" if="xpath1"/>
        </g:choice>
    </g:production>
    <g:production name="AxisStep">
        <g:choice name="ForwardOrReverseStep">
            <g:ref name="ReverseStep" lookahead="2"/>
            <g:ref name="ForwardStep"/>
        </g:choice>
        <g:ref name="PredicateList" not-if="xcore"/>
    </g:production>
    <g:production name="ForwardStep" node-type="void">
        <g:choice name="ForwardAxisOrAbbrev">
            <g:sequence lookahead="2">
                <g:ref name="ForwardAxis"/>
                <g:ref name="NodeTest"/>
            </g:sequence>
            <g:ref name="AbbrevForwardStep" not-if="xcore"/>
        </g:choice>
    </g:production>
    <g:production name="ForwardAxis">
        <g:choice break="true" name="ForwardAxisNames">
            <g:sequence>
                <g:string process-value="yes">child</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence>
                <g:string process-value="yes">descendant</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence>
                <g:string process-value="yes">attribute</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence>
                <g:string process-value="yes">self</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence>
                <g:string process-value="yes">descendant-or-self</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence not-if="xcore">
                <g:string process-value="yes">following-sibling</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence not-if="xcore">
                <g:string process-value="yes">following</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence if="xcore xpath1 xpath20 xpath30 xslt2-patterns">
                <g:string process-value="yes">namespace</g:string>
                <g:string>::</g:string>
            </g:sequence>
        </g:choice>
    </g:production>
    <g:production name="AbbrevForwardStep" not-if="xcore">
        <g:optional name="OptionalAtSugar">
            <g:string process-value="yes">@</g:string>
        </g:optional>
        <g:ref name="NodeTest"/>
    </g:production>
    <g:production name="ReverseStep" node-type="void">
        <g:choice name="ReverseAxisOrAbbrev">
            <g:sequence>
                <g:ref name="ReverseAxis"/>
                <g:ref name="NodeTest"/>
            </g:sequence>
        </g:choice>
    </g:production>
    <g:production name="ReverseAxis">
        <g:choice break="true" name="ReverseAxisNames">
            <g:sequence>
                <g:string process-value="yes">parent</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence>
                <g:string process-value="yes">ancestor</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence not-if="xcore">
                <g:string process-value="yes">preceding-sibling</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence not-if="xcore">
                <g:string process-value="yes">preceding</g:string>
                <g:string>::</g:string>
            </g:sequence>
            <g:sequence>
                <g:string process-value="yes">ancestor-or-self</g:string>
                <g:string>::</g:string>
            </g:sequence>
        </g:choice>
    </g:production>
    <g:production name="AbbrevReverseStep" not-if="xcore">
        <g:string>..</g:string>
    </g:production>
    <g:production name="NodeTest">
        <g:choice name="KindOrNameTest">
            <g:ref name="KindTest" lookahead="2"/>
            <g:ref name="NameTest"/>
        </g:choice>
    </g:production>
    <g:production name="NameTest">
        <g:choice name="QNameOrWildcard">
            <g:ref name="_QName_or_EQName" unfold="yes"/>
            <g:ref name="Wildcard"/>
        </g:choice>
    </g:production>
    <g:production name="Wildcard" whitespace-spec="explicit">
        <g:choice break="true" name="WildcardChoice">
            <g:string process-value="yes">*</g:string>
            <g:ref name="NCNameColonStar" needs-exposition-parens="yes"/>
        </g:choice>
    </g:production>
    <g:production name="FilterExpr" if="xpath1 xpath20 xquery10 xslt2-patterns">
        <g:ref name="PrimaryExpr"/>
        <g:ref name="PredicateList"/>
    </g:production>
    <g:production name="PredicateList" not-if="xcore" condition="&gt; 0">
        <g:zeroOrMore name="PredicatesListX">
            <g:ref name="Predicate"/>
        </g:zeroOrMore>
    </g:production>
    <g:production name="Predicate" not-if="xcore">
        <g:string>[</g:string>
        <g:ref name="ExprSingle" if="xpath1"/>
        <g:string>]</g:string>
    </g:production>
    <!-- ] end PathExpr -->
    <!-- [ start PrimaryExpr -->
    <g:production name="PrimaryExpr" node-type="void">
        <g:choice name="PrimaryExprChoices" break="true">
            <g:ref name="Literal"/>
            <g:ref name="VarRef"/>
            <g:ref name="ParenthesizedExpr"/>
            <g:ref name="FunctionCall" lookahead="2"/>
        </g:choice>
    </g:production>
    <g:production name="Literal" node-type="void">
        <g:choice name="NumericOrStringLit">
            <g:ref name="NumericLiteral"/>
            <g:ref name="StringLiteral"/>
        </g:choice>
    </g:production>
    <g:production name="NumericLiteral" node-type="void">
        <g:choice name="NumericLitChoice">
            <g:ref name="IntegerLiteral"/>
            <g:ref name="DecimalLiteral"/>
        </g:choice>
    </g:production>
    <g:production name="VarRef" node-type="void">
        <g:string>$</g:string>
        <g:ref name="VarName"/>
    </g:production>
    <g:production name="VarName">
        <g:ref name="_QName_or_EQName" unfold="yes"/>
    </g:production>
    <g:production name="ParenthesizedExpr">
        <g:string>(</g:string>
        <g:ref name="ExprSingle" if="xpath1"/>
        <g:string>)</g:string>
    </g:production>
    <g:production name="ContextItemExpr" not-if="xcore">
        <g:string process-value="yes">.</g:string>
    </g:production>
    <g:production name="FunctionCall" comment-id="parens" xgc-id="reserved-function-names">
        <g:ref name="_Function_QName_or_EQName" unfold="yes"/>
        <g:choice>
            <g:sequence if="xcore xpath1 xpath20 xquery10 xslt2-patterns">
                <g:string>(</g:string>
                <g:optional name="ArgList">
                    <g:ref name="ExprSingle"/>
                    <g:zeroOrMore name="ArgListTail">
                        <g:string>,</g:string>
                        <g:ref name="ExprSingle"/>
                    </g:zeroOrMore>
                </g:optional>
                <g:string>)</g:string>
            </g:sequence>
        </g:choice>
    </g:production>
    <!-- [ start Constructor -->
    <!-- ] end Constructor -->
    <!-- [ start Function Items -->
    <!-- ] end Function Items -->
    <!-- ] end PrimaryExpr -->
    <!-- [ start Types + Tests -->
    <g:production name="KindTest" node-type="void">
        <g:choice break="true" name="KindTestChoice">
            <g:ref name="PITest"/>
            <g:ref name="CommentTest"/>
            <g:ref name="TextTest"/>
            <g:ref name="AnyKindTest"/>
        </g:choice>
    </g:production>
    <g:production name="AnyKindTest">
        <g:string>node</g:string>
        <g:string>(</g:string>
        <g:string>)</g:string>
    </g:production>
    <g:production name="TextTest">
        <g:string>text</g:string>
        <g:string>(</g:string>
        <g:string>)</g:string>
    </g:production>
    <g:production name="CommentTest">
        <g:string>comment</g:string>
        <g:string>(</g:string>
        <g:string>)</g:string>
    </g:production>
    <g:production name="PITest">
        <g:string>processing-instruction</g:string>
        <g:string>(</g:string>
        <g:optional name="OptionalPITestBody">
            <g:choice name="NCNameForPIOrStringLit">
                <g:ref name="StringLiteral"/>
            </g:choice>
        </g:optional>
        <g:string>)</g:string>
    </g:production>
    <!-- ] end Types + Tests -->
    <!-- ===================================================================== -->
    <!-- [ start Full Text -->
    <!-- [ start FT positional filters -->
    <!-- ] end FT positional filters -->
    <!-- [ start FTMatchOptions -->
    <!-- ] end FTMatchOptions -->
    <!-- ] end Full Text -->
    <!-- ===================================================================== -->
    <!-- [ start XQuery Update Facility -->
    <!-- ] end XQuery Update Facility -->
    <!-- ===================================================================== -->
    <!-- [ start XQuery Scripting Extension -->
    <!-- ] end XQuery Scripting Extension -->
    <!-- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -->
    <!-- [ start quasi-lexical productions with show="no" -->
    <!--
      We don't want this production (_QName_or_EQName) to appear in
      any extracted grammar: it should only be used via unfold="yes".
      (So, its *content* will appear in extracted grammars, but not the
      production itself. The production is like a extraction-time macro.)

      So how do we indicate that a production should not appear in any
      extracted grammar?

      The natural thing would be to mark the production with if="", but
      if we try that, the grammar doesn't validate, because attribute 'if'
      is of type IDREFS, so it must contain a reference to at least one ID.
      But we should be fine as long as we use an ID other than those
      defined by the <g:language> elements at the top. The ID defined
      by this production itself is an easy candidate.

      (Note that while show="no" would prevent the production from being
      rendered in specification EBNF, it wouldn't prevent the production
      from appearing in extracted grammars. So, e.g. it would still appear
      in the javacc input and jjdoc.html.)
  -->
    <g:production name="NCName" show="no">
        <!-- TODO: For right now, parser has to flag NCName with ":" in it!  -->
        <!-- One would like to structure QName as a multi-part production... however, the problem with this
        is it makes it necessary to make a look-ahead of 4 for many choices... for instance, functionCall:
        foo:baz(). Also whitespace is easier to control if QName is a single token!  -->
        <g:ref name="QName"/>
    </g:production>
    <g:production name="QName" show="no">
        <g:choice name="QNameChoiceList">
            <g:ref name="FunctionQName"/>
            <!-- -->
            <g:string process-value="yes">comment</g:string>
            <g:string process-value="yes">node</g:string>
            <g:string process-value="yes">processing-instruction</g:string>
            <g:string process-value="yes">text</g:string>
        </g:choice>
    </g:production>
    <g:production name="FunctionQName" exposition-name="QName" show="no">
        <g:choice name="FunctionQNameChoiceList">
            <g:ref name="QNameToken" show="no"/>
            <!-- -->
            <g:string process-value="yes">ancestor</g:string>
            <g:string process-value="yes">ancestor-or-self</g:string>
            <g:string process-value="yes">and</g:string>
            <g:string process-value="yes" if="xpath1">attribute</g:string>
            <g:string process-value="yes">child</g:string>
            <g:string process-value="yes">descendant</g:string>
            <g:string process-value="yes">descendant-or-self</g:string>
            <g:string process-value="yes" not-if="xcore">div</g:string>
            <g:string process-value="yes" not-if="xcore">following</g:string>
            <g:string process-value="yes" not-if="xcore">following-sibling</g:string>
            <g:string process-value="yes" not-if="xcore">mod</g:string>
            <g:string process-value="yes">namespace</g:string>
            <g:string process-value="yes">or</g:string>
            <g:string process-value="yes">parent</g:string>
            <g:string process-value="yes" not-if="xcore">preceding</g:string>
            <g:string process-value="yes" not-if="xcore">preceding-sibling</g:string>
            <g:string process-value="yes">self</g:string>
        </g:choice>
    </g:production>
    <!-- ] end quasi-lexical productions with show="no" -->
    <!-- ====================== Lexical Specifications ==================== -->
    <!--
    @subtract-reg-expr
    ~~~~~~~~~~~~~~~~~~

    Several elements in this file have the attribute 'subtract-reg-expr',
    indicating that certain character sequences are excluded from the set
    that the element would otherwise derive.

    When a specification document is built, grammar2spec.xsl handles
    'subtract-reg-expr' by emitting notation of the form "(A - B)".

    However, when javacc.xsl builds a parser (or, more precisely, when
    it creates the input for the JavaCC parser-generator), it ignores
    'subtract-reg-expr'. It has to, because the input language for JavaCC
    doesn't have a good way to express its meaning. But we still need the
    parser to enforce the restriction, so here's how we do that...

    In the simplest set of cases, 'subtract-reg-expr' is used to specify
    (roughly):
        any sequence of characters that doesn't contain
        the terminator for the parent construct
    Specifically:
        PragmaContents       ::= (Char* - (Char* '#)'  Char*))
        DirPIContents        ::= (Char* - (Char* '?>'  Char*))
        CDataSectionContents ::= (Char* - (Char* ']]>' Char*))
    In these cases, the lexical state machine has a state in which it
    recognizes a Char or the terminator. Of course, each character in
    the terminator is also a Char, so an occurrence of the terminator
    in the input could conceivably be recognized as a sequence of Chars.
    What prevents this is that JavaCC's lexer, in any given state,
    will always prefer the longest match. (This is true for many/most
    lexical analyzers.) Since the terminator is multi-character, the
    lexer will always prefer to recognize it over a single-character Char.
    Thus, the lexer will terminate the construct at the first (leftmost)
    occurrence of the terminator, equivalent to ensuring that the construct
    doesn't contain a sequence of characters matching the terminator.

    The case for Comments is a slight variation:
        CommentContents ::= (Char+ - (Char* ('(:' | ':)') Char*))
    Here, the lexical state recognizes 3 things: Char, the comment
    terminator, and the starter for a nested comment. Because the
    latter two are multi-character, the lexer will always recognize
    them as such, rather than as a sequence of Char.

    It starts to get trickier when we consider DirCommentConstructors:
        DirCommentContents ::= ((Char - '-') | ('-' (Char - '-')))*
    Note that here, it's not simply a matter of excluding the 3-character
    terminator (which I can't write here because it would terminate this
    comment!); if it were, it would be handled the same as the above cases.
    Instead, the production excludes even the 2-character prefix of the
    terminator. To handle this, we create an ad-hoc symbol (not visible in
    the published grammar) deriving the disallowed double-dash, and add it
    to the appropriate lexical state. Since it matches 2 characters, the
    lexer will always prefer to recognize it over Char. But since the
    DirCommentContents production isn't expecting it, the parser will always
    raise a syntax error when it occurs. Of course, if the input has a
    double-dash followed by a right-angle-bracket, the lexer will prefer the
    3-character DirComment-terminator over the 2-character DoubleDash token,
    as desired.

    (Note that the DirCommentContents production also disallows any sequence
    of characters ending with a dash. It turns out that the DoubleDash token
    will also be recognized (and thus cause an error) in such cases.)

    The last cases we consider are these:
        ElementContentChar  ::= Char - [{}<&]
        QuotAttrContentChar ::= Char - ["{}<&]
        AposAttrContentChar ::= Char - ['{}<&]
    For these, we could almost use JavaCC's '~' modifier:
        If the character list is prefixed by the "~" symbol,
        the set of characters it represents is any UNICODE
        character not in the specified set.
    However, we want the complement with respect to Char, not all of
    Unicode, which is not the same thing. So we proceed as in the previous
    case, creating ad hoc symbols for the disallowed characters and adding
    them to the appropriate lexical state. (Actually, not for *all* of the
    disallowed characters, as some of them already have valid transitions.
    In practice, we only need to create such symbols for '}', '<', and '&'.)
    However, because they match single-character tokens, we can't rely on
    the lexer's "longest match" rule to prefer them over Char. Instead, we
    rely on the lexer's tie-breaking rule, which is to prefer the symbol
    that was declared earliest in the parser-input. The declaration-order
    in the parser-input is the same as the order of <g:token> elements in
    this file, so we just need to ensure that the <g:token> elements for
    'error' symbols occur before the ones for:
        ElementContentChar, QuotAttrContentChar, and AposAttrContentChar

    (Actually, for the same reason, we also need to ensure that the
    *non*-error single-character symbols recognized in those lexical states
    are declared early.)

    All of which is to explain why the first of the <g:token> elements are
    the ones for error symbols:
  -->
    <!--
    Note that "XML" is disallowed as a PITarget via prose in the XQuery
    specification, not via a 'subtract-reg-expr' attribute in the grammar.
    However, we use the same technique to implement the disallowance:
    create an 'error' symbol, add it to the appropriate lexical state,
    and ensure that it's declared before any symbol that it needs to
    take precedence over (in this case, PITarget).
  -->
    <!--
    The XQuery and XPath specs say that when a numeric literal is followed by a
    keyword with no intervening whitespace/comment, it's a syntax error.
    E.g.: 10div 3
    However, your typical lexer would happily recognize the IntegerLiteral '10'
    immediately followed by the keyword 'div'. Therefore, we need to take extra
    effort to enforce the restriction. That's what this error-symbol
    (NumericLiteralError, abbreviated NLE) is for.

    The production is contructed so that:
    (a) If the input contains an occurrence of the invalid syntax, NLE will
        match one more character than the appropriate numeric literal symbol.
        (E.g., for "10div 3", NLE matches "10d", but IntergerLiteral only "10".)
        So (in such cases), the lexer will always prefer NLE, which the parser
        is never expecting, so it will raise a syntax error, as required.

    (b) If the input does not contain an occurrence of the invalid syntax, NLE
        will either not match at all, or will match fewer characters than the
        appropriate numeric literal symbol.
        (E.g., for "10 div 3", NLE doesn't match at all; for "10e2 div 3", NLE
        matches "10e", but DoubleLiteral matches "10e2".)
        So (in such cases), the lexer will never prefer NLE.

    Since the longest-match rule takes care of things, the declared-earliest
    rule doesn't come into play, so it doesn't matter where we declare NLE, but
    we might as well declare it with the other error-symbols.
  -->
    <g:token name="NumericLiteralError" show="no">
        <g:choice name="DoubleStringNumericLiteralError">
            <g:sequence>
                <g:string>.</g:string>
                <g:ref name="Digits"/>
            </g:sequence>
            <g:sequence>
                <g:ref name="Digits"/>
                <g:optional name="DoubleOptionFractionPartNumericLiteralError">
                    <g:string>.</g:string>
                    <g:zeroOrMore name="DoubleFractionPartNumericLiteralError">
                        <g:charClass>
                            <g:charRange minChar="0" maxChar="9"/>
                        </g:charClass>
                    </g:zeroOrMore>
                </g:optional>
            </g:sequence>
        </g:choice>
        <g:optional name="NumericLiteralErrorOptionalFractionPart">
            <g:charClass>
                <g:char>e</g:char>
                <g:char>E</g:char>
            </g:charClass>
            <g:optional name="DoubleNegOrPosNumericLiteralError">
                <g:charClass>
                    <g:char>+</g:char>
                    <g:char>-</g:char>
                </g:charClass>
            </g:optional>
            <g:ref name="Digits"/>
        </g:optional>
        <g:charClass>
            <g:charRange minChar="a" maxChar="z"/>
            <g:charRange minChar="A" maxChar="Z"/>
        </g:charClass>
    </g:token>
    <!--
    The following productions define symbols that are expanded
    in-place when they are referenced by the main grammar.
    (This happens because they either are marked with inline="true"
    or don't have an 'inline' attribute.)
    Thus, the productions do not appear as such in the specification document.

    They are arranged roughly in the order of their first reference from the
    main grammar.
  -->
    <g:token name="Slash">
        <g:string>/</g:string>
    </g:token>
    <g:token name="SlashSlash">
        <g:string>//</g:string>
    </g:token>
    <g:token name="LeftAngleBracket">
        <g:string>&lt;</g:string>
    </g:token>
    <g:token name="Plus" value-type="id">
        <g:string>+</g:string>
    </g:token>
    <g:token name="Minus" value-type="id">
        <g:string>-</g:string>
    </g:token>
    <g:token name="NCNameColonStar" value-type="string" inline="true">
        <g:ref name="NCNameTok"/>
        <g:string>:</g:string>
        <g:string>*</g:string>
    </g:token>
    <!-- Recognizing it in content disallows ]]> in content same as XML. -->
    <!-- ======================= A.2.1 Terminal Symbols ====================== -->
    <!--
    The following productions appear in A.2.1 Terminal Symbols,
    because they are marked with inline="false".
  -->
    <g:token name="IntegerLiteral" inline="false" value-type="number" delimiter-type="nondelimiting">
        <g:ref name="Digits"/>
    </g:token>
    <g:token name="DecimalLiteral" inline="false" value-type="number" whitespace-spec="explicit" delimiter-type="nondelimiting">
        <g:choice name="DecimalString">
            <g:sequence>
                <g:string>.</g:string>
                <g:ref name="Digits"/>
            </g:sequence>
            <g:sequence>
                <g:ref name="Digits"/>
                <g:string>.</g:string>
                <g:zeroOrMore name="DecimalFractionPart">
                    <g:charClass>
                        <g:charRange minChar="0" maxChar="9"/>
                    </g:charClass>
                </g:zeroOrMore>
            </g:sequence>
        </g:choice>
    </g:token>
    <g:token name="StringLiteral" inline="false" value-type="string" whitespace-spec="explicit" delimiter-type="delimiting">
        <g:choice name="StringDilimitType">
            <g:sequence>
                <g:string>"</g:string>
                <g:zeroOrMore name="CharsInQuote">
                    <g:choice name="QuoteTypeChar">
                        <g:complement>
                            <g:charClass>
                                <g:char>"</g:char>
                            </g:charClass>
                        </g:complement>
                    </g:choice>
                </g:zeroOrMore>
                <g:string>"</g:string>
            </g:sequence>
            <g:sequence>
                <g:string>'</g:string>
                <g:zeroOrMore name="CharsInApos">
                    <g:choice name="AposTypeChar">
                        <g:complement>
                            <g:charClass>
                                <g:char>'</g:char>
                            </g:charClass>
                        </g:complement>
                    </g:choice>
                </g:zeroOrMore>
                <g:string>'</g:string>
            </g:sequence>
        </g:choice>
    </g:token>
    <!--
    In the XQuery spec, 6 symbols:
        PITarget, CharRef, QName, NCName, S, Char
    are defined by reference to productions in other specifications ("XML" or
    "Namespaces in XML"). So, each of the next 6 g:token elements includes
    attributes 'is-xml' and 'xhref' to define that external reference.
    In addition, each also supplies EBNF for the symbol being defined. The
    EBNF isn't rendered in the spec document, but javacc.xsl uses it to
    generate the parser.
  -->
    <g:token name="QNameToken" exposition-name="QName" delimiter-type="nondelimiting" inline="false" node-type="void" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml-names/#NT-QName" xgc-id="xml-version">
        <g:optional name="QNamePrefixAndDelimiter">
            <g:ref name="NCNameTok"/>
            <g:string>:</g:string>
        </g:optional>
        <g:ref name="LocalPart"/>
    </g:token>
    <g:token name="NCNameTok" exposition-name="NCName" delimiter-type="nondelimiting" inline="false" value-type="string" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml-names/#NT-NCName" xgc-id="xml-version">
        <g:ref name="Nmstart"/>
        <g:zeroOrMore name="NCNameTail">
            <g:ref name="Nmchar"/>
        </g:zeroOrMore>
    </g:token>
    <g:token name="Char" inline="false" delimiter-type="hide" value-type="string" is-xml="yes" xgc-id="xml-version" xhref="http://www.w3.org/TR/REC-xml#NT-Char">
        <g:charClass>
            <g:charCode value="0009"/>
            <g:charCode value="000D"/>
            <g:charCode value="000A"/>
            <!-- This isn't quite right, but JavaCC doesn't understand surrogates. -->
            <g:charCodeRange minValue="0020" maxValue="FFFD"/>
        </g:charClass>
    </g:token>
    <!--
    "The following symbols are used only in the definition of terminal symbols;
    they are not terminal symbols in the grammar of A.1 EBNF."
  -->
    <g:token name="Digits" delimiter-type="hide" inline="false" is-local-to-terminal-symbol="yes">
        <g:oneOrMore name="DigitsString">
            <g:charClass>
                <g:charRange minChar="0" maxChar="9"/>
            </g:charClass>
        </g:oneOrMore>
    </g:token>
    <!-- =================== end of A.2.1 Terminal Symbols =================== -->
    <!--
    The remaining productions are invisible.
    Mostly they define symbols referenced by the 'external reference'
    productions above.
  -->
    <!-- It would be nice to not take character content runs one character
       at a time.  However, it seems difficult to say, "all these characters
       but these three", at least in JavaCC. -->
    <g:token name="WhitespaceChar" inline="false" show="no">
        <g:charClass>
            <!-- NOTE: From XML 1.1: -->
            <!-- To simplify the tasks of applications, the XML processor MUST behave as if it normalized  -->
            <!-- all line breaks in external parsed entities (including the document entity) on input,  -->
            <!-- before parsing, by translating all of the following to a single #xA character: -->
            <!-- 1. the two-character sequence #xD #xA -->
            <!-- 2. the two-character sequence #xD #x85 -->
            <!-- 3. the single character #x85 -->
            <!-- 4. the single character #x2028 -->
            <!-- 5. any #xD character that is not immediately followed by #xA or #x85. -->
            <g:charCode value="0009"/>
            <g:charCode value="000D"/>
            <g:charCode value="000A"/>
            <!-- char xml:space="preserve"> </g:char -->
            <!-- SGML mode in EMacs doesn't like xml:space, so
                             we avoid it for now. -->
            <g:charCode value="0020"/>
        </g:charClass>
    </g:token>
    <g:token name="LocalPart" value-type="string" show="no" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml-names/#NT-LocalPart" xgc-id="xml-version">
        <g:ref name="NCNameTok"/>
    </g:token>
    <g:token name="Nmstart" inline="false" show="no">
        <g:choice name="NmstartChar">
            <g:ref name="Letter"/>
            <g:string>_</g:string>
        </g:choice>
    </g:token>
    <g:token name="Nmchar" inline="false" show="no">
        <g:choice name="NmcharChoice">
            <g:ref name="Letter"/>
            <g:ref name="CombiningChar"/>
            <g:ref name="Extender"/>
            <g:ref name="Digit"/>
            <g:string>.</g:string>
            <g:string>-</g:string>
            <g:string>_</g:string>
        </g:choice>
    </g:token>
    <g:token name="Letter" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Letter" xgc-id="xml-version" show="no">
        <g:choice name="LetterChars">
            <g:ref name="BaseChar"/>
            <g:ref name="Ideographic"/>
        </g:choice>
    </g:token>
    <g:token name="BaseChar" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-BaseChar" xgc-id="xml-version" show="no">
        <g:charClass>
            <g:charCodeRange minValue="0041" maxValue="005a"/>
            <g:charCodeRange minValue="0061" maxValue="007a"/>
            <g:charCodeRange minValue="00c0" maxValue="00d6"/>
            <g:charCodeRange minValue="00d8" maxValue="00f6"/>
            <g:charCodeRange minValue="00f8" maxValue="00ff"/>
            <g:charCodeRange minValue="0100" maxValue="0131"/>
            <g:charCodeRange minValue="0134" maxValue="013e"/>
            <g:charCodeRange minValue="0141" maxValue="0148"/>
            <g:charCodeRange minValue="014a" maxValue="017e"/>
            <g:charCodeRange minValue="0180" maxValue="01c3"/>
            <g:charCodeRange minValue="01cd" maxValue="01f0"/>
            <g:charCodeRange minValue="01f4" maxValue="01f5"/>
            <g:charCodeRange minValue="01fa" maxValue="0217"/>
            <g:charCodeRange minValue="0250" maxValue="02a8"/>
            <g:charCodeRange minValue="02bb" maxValue="02c1"/>
            <g:charCode value="0386"/>
            <g:charCodeRange minValue="0388" maxValue="038a"/>
            <g:charCode value="038c"/>
            <g:charCodeRange minValue="038e" maxValue="03a1"/>
            <g:charCodeRange minValue="03a3" maxValue="03ce"/>
            <g:charCodeRange minValue="03d0" maxValue="03d6"/>
            <g:charCode value="03da"/>
            <g:charCode value="03dc"/>
            <g:charCode value="03de"/>
            <g:charCode value="03e0"/>
            <g:charCodeRange minValue="03e2" maxValue="03f3"/>
            <g:charCodeRange minValue="0401" maxValue="040c"/>
            <g:charCodeRange minValue="040e" maxValue="044f"/>
            <g:charCodeRange minValue="0451" maxValue="045c"/>
            <g:charCodeRange minValue="045e" maxValue="0481"/>
            <g:charCodeRange minValue="0490" maxValue="04c4"/>
            <g:charCodeRange minValue="04c7" maxValue="04c8"/>
            <g:charCodeRange minValue="04cb" maxValue="04cc"/>
            <g:charCodeRange minValue="04d0" maxValue="04eb"/>
            <g:charCodeRange minValue="04ee" maxValue="04f5"/>
            <g:charCodeRange minValue="04f8" maxValue="04f9"/>
            <g:charCodeRange minValue="0531" maxValue="0556"/>
            <g:charCode value="0559"/>
            <g:charCodeRange minValue="0561" maxValue="0586"/>
            <g:charCodeRange minValue="05d0" maxValue="05ea"/>
            <g:charCodeRange minValue="05f0" maxValue="05f2"/>
            <g:charCodeRange minValue="0621" maxValue="063a"/>
            <g:charCodeRange minValue="0641" maxValue="064a"/>
            <g:charCodeRange minValue="0671" maxValue="06b7"/>
            <g:charCodeRange minValue="06ba" maxValue="06be"/>
            <g:charCodeRange minValue="06c0" maxValue="06ce"/>
            <g:charCodeRange minValue="06d0" maxValue="06d3"/>
            <g:charCode value="06d5"/>
            <g:charCodeRange minValue="06e5" maxValue="06e6"/>
            <g:charCodeRange minValue="0905" maxValue="0939"/>
            <g:charCode value="093d"/>
            <g:charCodeRange minValue="0958" maxValue="0961"/>
            <g:charCodeRange minValue="0985" maxValue="098c"/>
            <g:charCodeRange minValue="098f" maxValue="0990"/>
            <g:charCodeRange minValue="0993" maxValue="09a8"/>
            <g:charCodeRange minValue="09aa" maxValue="09b0"/>
            <g:charCode value="09b2"/>
            <g:charCodeRange minValue="09b6" maxValue="09b9"/>
            <g:charCodeRange minValue="09dc" maxValue="09dd"/>
            <g:charCodeRange minValue="09df" maxValue="09e1"/>
            <g:charCodeRange minValue="09f0" maxValue="09f1"/>
            <g:charCodeRange minValue="0a05" maxValue="0a0a"/>
            <g:charCodeRange minValue="0a0f" maxValue="0a10"/>
            <g:charCodeRange minValue="0a13" maxValue="0a28"/>
            <g:charCodeRange minValue="0a2a" maxValue="0a30"/>
            <g:charCodeRange minValue="0a32" maxValue="0a33"/>
            <g:charCodeRange minValue="0a35" maxValue="0a36"/>
            <g:charCodeRange minValue="0a38" maxValue="0a39"/>
            <g:charCodeRange minValue="0a59" maxValue="0a5c"/>
            <g:charCode value="0a5e"/>
            <g:charCodeRange minValue="0a72" maxValue="0a74"/>
            <g:charCodeRange minValue="0a85" maxValue="0a8b"/>
            <g:charCode value="0a8d"/>
            <g:charCodeRange minValue="0a8f" maxValue="0a91"/>
            <g:charCodeRange minValue="0a93" maxValue="0aa8"/>
            <g:charCodeRange minValue="0aaa" maxValue="0ab0"/>
            <g:charCodeRange minValue="0ab2" maxValue="0ab3"/>
            <g:charCodeRange minValue="0ab5" maxValue="0ab9"/>
            <g:charCode value="0abd"/>
            <g:charCode value="0ae0"/>
            <g:charCodeRange minValue="0b05" maxValue="0b0c"/>
            <g:charCodeRange minValue="0b0f" maxValue="0b10"/>
            <g:charCodeRange minValue="0b13" maxValue="0b28"/>
            <g:charCodeRange minValue="0b2a" maxValue="0b30"/>
            <g:charCodeRange minValue="0b32" maxValue="0b33"/>
            <g:charCodeRange minValue="0b36" maxValue="0b39"/>
            <g:charCode value="0b3d"/>
            <g:charCodeRange minValue="0b5c" maxValue="0b5d"/>
            <g:charCodeRange minValue="0b5f" maxValue="0b61"/>
            <g:charCodeRange minValue="0b85" maxValue="0b8a"/>
            <g:charCodeRange minValue="0b8e" maxValue="0b90"/>
            <g:charCodeRange minValue="0b92" maxValue="0b95"/>
            <g:charCodeRange minValue="0b99" maxValue="0b9a"/>
            <g:charCode value="0b9c"/>
            <g:charCodeRange minValue="0b9e" maxValue="0b9f"/>
            <g:charCodeRange minValue="0ba3" maxValue="0ba4"/>
            <g:charCodeRange minValue="0ba8" maxValue="0baa"/>
            <g:charCodeRange minValue="0bae" maxValue="0bb5"/>
            <g:charCodeRange minValue="0bb7" maxValue="0bb9"/>
            <g:charCodeRange minValue="0c05" maxValue="0c0c"/>
            <g:charCodeRange minValue="0c0e" maxValue="0c10"/>
            <g:charCodeRange minValue="0c12" maxValue="0c28"/>
            <g:charCodeRange minValue="0c2a" maxValue="0c33"/>
            <g:charCodeRange minValue="0c35" maxValue="0c39"/>
            <g:charCodeRange minValue="0c60" maxValue="0c61"/>
            <g:charCodeRange minValue="0c85" maxValue="0c8c"/>
            <g:charCodeRange minValue="0c8e" maxValue="0c90"/>
            <g:charCodeRange minValue="0c92" maxValue="0ca8"/>
            <g:charCodeRange minValue="0caa" maxValue="0cb3"/>
            <g:charCodeRange minValue="0cb5" maxValue="0cb9"/>
            <g:charCode value="0cde"/>
            <g:charCodeRange minValue="0ce0" maxValue="0ce1"/>
            <g:charCodeRange minValue="0d05" maxValue="0d0c"/>
            <g:charCodeRange minValue="0d0e" maxValue="0d10"/>
            <g:charCodeRange minValue="0d12" maxValue="0d28"/>
            <g:charCodeRange minValue="0d2a" maxValue="0d39"/>
            <g:charCodeRange minValue="0d60" maxValue="0d61"/>
            <g:charCodeRange minValue="0e01" maxValue="0e2e"/>
            <g:charCode value="0e30"/>
            <g:charCodeRange minValue="0e32" maxValue="0e33"/>
            <g:charCodeRange minValue="0e40" maxValue="0e45"/>
            <g:charCodeRange minValue="0e81" maxValue="0e82"/>
            <g:charCode value="0e84"/>
            <g:charCodeRange minValue="0e87" maxValue="0e88"/>
            <g:charCode value="0e8a"/>
            <g:charCode value="0e8d"/>
            <g:charCodeRange minValue="0e94" maxValue="0e97"/>
            <g:charCodeRange minValue="0e99" maxValue="0e9f"/>
            <g:charCodeRange minValue="0ea1" maxValue="0ea3"/>
            <g:charCode value="0ea5"/>
            <g:charCode value="0ea7"/>
            <g:charCodeRange minValue="0eaa" maxValue="0eab"/>
            <g:charCodeRange minValue="0ead" maxValue="0eae"/>
            <g:charCode value="0eb0"/>
            <g:charCodeRange minValue="0eb2" maxValue="0eb3"/>
            <g:charCode value="0ebd"/>
            <g:charCodeRange minValue="0ec0" maxValue="0ec4"/>
            <g:charCodeRange minValue="0f40" maxValue="0f47"/>
            <g:charCodeRange minValue="0f49" maxValue="0f69"/>
            <g:charCodeRange minValue="10a0" maxValue="10c5"/>
            <g:charCodeRange minValue="10d0" maxValue="10f6"/>
            <g:charCode value="1100"/>
            <g:charCodeRange minValue="1102" maxValue="1103"/>
            <g:charCodeRange minValue="1105" maxValue="1107"/>
            <g:charCode value="1109"/>
            <g:charCodeRange minValue="110b" maxValue="110c"/>
            <g:charCodeRange minValue="110e" maxValue="1112"/>
            <g:charCode value="113c"/>
            <g:charCode value="113e"/>
            <g:charCode value="1140"/>
            <g:charCode value="114c"/>
            <g:charCode value="114e"/>
            <g:charCode value="1150"/>
            <g:charCodeRange minValue="1154" maxValue="1155"/>
            <g:charCode value="1159"/>
            <g:charCodeRange minValue="115f" maxValue="1161"/>
            <g:charCode value="1163"/>
            <g:charCode value="1165"/>
            <g:charCode value="1167"/>
            <g:charCode value="1169"/>
            <g:charCodeRange minValue="116d" maxValue="116e"/>
            <g:charCodeRange minValue="1172" maxValue="1173"/>
            <g:charCode value="1175"/>
            <g:charCode value="119e"/>
            <g:charCode value="11a8"/>
            <g:charCode value="11ab"/>
            <g:charCodeRange minValue="11ae" maxValue="11af"/>
            <g:charCodeRange minValue="11b7" maxValue="11b8"/>
            <g:charCode value="11ba"/>
            <g:charCodeRange minValue="11bc" maxValue="11c2"/>
            <g:charCode value="11eb"/>
            <g:charCode value="11f0"/>
            <g:charCode value="11f9"/>
            <g:charCodeRange minValue="1e00" maxValue="1e9b"/>
            <g:charCodeRange minValue="1ea0" maxValue="1ef9"/>
            <g:charCodeRange minValue="1f00" maxValue="1f15"/>
            <g:charCodeRange minValue="1f18" maxValue="1f1d"/>
            <g:charCodeRange minValue="1f20" maxValue="1f45"/>
            <g:charCodeRange minValue="1f48" maxValue="1f4d"/>
            <g:charCodeRange minValue="1f50" maxValue="1f57"/>
            <g:charCode value="1f59"/>
            <g:charCode value="1f5b"/>
            <g:charCode value="1f5d"/>
            <g:charCodeRange minValue="1f5f" maxValue="1f7d"/>
            <g:charCodeRange minValue="1f80" maxValue="1fb4"/>
            <g:charCodeRange minValue="1fb6" maxValue="1fbc"/>
            <g:charCode value="1fbe"/>
            <g:charCodeRange minValue="1fc2" maxValue="1fc4"/>
            <g:charCodeRange minValue="1fc6" maxValue="1fcc"/>
            <g:charCodeRange minValue="1fd0" maxValue="1fd3"/>
            <g:charCodeRange minValue="1fd6" maxValue="1fdb"/>
            <g:charCodeRange minValue="1fe0" maxValue="1fec"/>
            <g:charCodeRange minValue="1ff2" maxValue="1ff4"/>
            <g:charCodeRange minValue="1ff6" maxValue="1ffc"/>
            <g:charCode value="2126"/>
            <g:charCodeRange minValue="212a" maxValue="212b"/>
            <g:charCode value="212e"/>
            <g:charCodeRange minValue="2180" maxValue="2182"/>
            <g:charCodeRange minValue="3041" maxValue="3094"/>
            <g:charCodeRange minValue="30a1" maxValue="30fa"/>
            <g:charCodeRange minValue="3105" maxValue="312c"/>
            <g:charCodeRange minValue="ac00" maxValue="d7a3"/>
        </g:charClass>
    </g:token>
    <g:token name="Ideographic" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Ideographic" xgc-id="xml-version" show="no">
        <g:charClass>
            <g:charCodeRange minValue="4e00" maxValue="9fa5"/>
            <g:charCode value="3007"/>
            <g:charCodeRange minValue="3021" maxValue="3029"/>
        </g:charClass>
    </g:token>
    <g:token name="CombiningChar" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-CombiningChar" xgc-id="xml-version" show="no">
        <g:charClass>
            <g:charCodeRange minValue="0300" maxValue="0345"/>
            <g:charCodeRange minValue="0360" maxValue="0361"/>
            <g:charCodeRange minValue="0483" maxValue="0486"/>
            <g:charCodeRange minValue="0591" maxValue="05a1"/>
            <g:charCodeRange minValue="05a3" maxValue="05b9"/>
            <g:charCodeRange minValue="05bb" maxValue="05bd"/>
            <g:charCode value="05bf"/>
            <g:charCodeRange minValue="05c1" maxValue="05c2"/>
            <g:charCode value="05c4"/>
            <g:charCodeRange minValue="064b" maxValue="0652"/>
            <g:charCode value="0670"/>
            <g:charCodeRange minValue="06d6" maxValue="06dc"/>
            <g:charCodeRange minValue="06dd" maxValue="06df"/>
            <g:charCodeRange minValue="06e0" maxValue="06e4"/>
            <g:charCodeRange minValue="06e7" maxValue="06e8"/>
            <g:charCodeRange minValue="06ea" maxValue="06ed"/>
            <g:charCodeRange minValue="0901" maxValue="0903"/>
            <g:charCode value="093c"/>
            <g:charCodeRange minValue="093e" maxValue="094c"/>
            <g:charCode value="094d"/>
            <g:charCodeRange minValue="0951" maxValue="0954"/>
            <g:charCodeRange minValue="0962" maxValue="0963"/>
            <g:charCodeRange minValue="0981" maxValue="0983"/>
            <g:charCode value="09bc"/>
            <g:charCode value="09be"/>
            <g:charCode value="09bf"/>
            <g:charCodeRange minValue="09c0" maxValue="09c4"/>
            <g:charCodeRange minValue="09c7" maxValue="09c8"/>
            <g:charCodeRange minValue="09cb" maxValue="09cd"/>
            <g:charCode value="09d7"/>
            <g:charCodeRange minValue="09e2" maxValue="09e3"/>
            <g:charCode value="0a02"/>
            <g:charCode value="0a3c"/>
            <g:charCode value="0a3e"/>
            <g:charCode value="0a3f"/>
            <g:charCodeRange minValue="0a40" maxValue="0a42"/>
            <g:charCodeRange minValue="0a47" maxValue="0a48"/>
            <g:charCodeRange minValue="0a4b" maxValue="0a4d"/>
            <g:charCodeRange minValue="0a70" maxValue="0a71"/>
            <g:charCodeRange minValue="0a81" maxValue="0a83"/>
            <g:charCode value="0abc"/>
            <g:charCodeRange minValue="0abe" maxValue="0ac5"/>
            <g:charCodeRange minValue="0ac7" maxValue="0ac9"/>
            <g:charCodeRange minValue="0acb" maxValue="0acd"/>
            <g:charCodeRange minValue="0b01" maxValue="0b03"/>
            <g:charCode value="0b3c"/>
            <g:charCodeRange minValue="0b3e" maxValue="0b43"/>
            <g:charCodeRange minValue="0b47" maxValue="0b48"/>
            <g:charCodeRange minValue="0b4b" maxValue="0b4d"/>
            <g:charCodeRange minValue="0b56" maxValue="0b57"/>
            <g:charCodeRange minValue="0b82" maxValue="0b83"/>
            <g:charCodeRange minValue="0bbe" maxValue="0bc2"/>
            <g:charCodeRange minValue="0bc6" maxValue="0bc8"/>
            <g:charCodeRange minValue="0bca" maxValue="0bcd"/>
            <g:charCode value="0bd7"/>
            <g:charCodeRange minValue="0c01" maxValue="0c03"/>
            <g:charCodeRange minValue="0c3e" maxValue="0c44"/>
            <g:charCodeRange minValue="0c46" maxValue="0c48"/>
            <g:charCodeRange minValue="0c4a" maxValue="0c4d"/>
            <g:charCodeRange minValue="0c55" maxValue="0c56"/>
            <g:charCodeRange minValue="0c82" maxValue="0c83"/>
            <g:charCodeRange minValue="0cbe" maxValue="0cc4"/>
            <g:charCodeRange minValue="0cc6" maxValue="0cc8"/>
            <g:charCodeRange minValue="0cca" maxValue="0ccd"/>
            <g:charCodeRange minValue="0cd5" maxValue="0cd6"/>
            <g:charCodeRange minValue="0d02" maxValue="0d03"/>
            <g:charCodeRange minValue="0d3e" maxValue="0d43"/>
            <g:charCodeRange minValue="0d46" maxValue="0d48"/>
            <g:charCodeRange minValue="0d4a" maxValue="0d4d"/>
            <g:charCode value="0d57"/>
            <g:charCode value="0e31"/>
            <g:charCodeRange minValue="0e34" maxValue="0e3a"/>
            <g:charCodeRange minValue="0e47" maxValue="0e4e"/>
            <g:charCode value="0eb1"/>
            <g:charCodeRange minValue="0eb4" maxValue="0eb9"/>
            <g:charCodeRange minValue="0ebb" maxValue="0ebc"/>
            <g:charCodeRange minValue="0ec8" maxValue="0ecd"/>
            <g:charCodeRange minValue="0f18" maxValue="0f19"/>
            <g:charCode value="0f35"/>
            <g:charCode value="0f37"/>
            <g:charCode value="0f39"/>
            <g:charCode value="0f3e"/>
            <g:charCode value="0f3f"/>
            <g:charCodeRange minValue="0f71" maxValue="0f84"/>
            <g:charCodeRange minValue="0f86" maxValue="0f8b"/>
            <g:charCodeRange minValue="0f90" maxValue="0f95"/>
            <g:charCode value="0f97"/>
            <g:charCodeRange minValue="0f99" maxValue="0fad"/>
            <g:charCodeRange minValue="0fb1" maxValue="0fb7"/>
            <g:charCode value="0fb9"/>
            <g:charCodeRange minValue="20d0" maxValue="20dc"/>
            <g:charCode value="20e1"/>
            <g:charCodeRange minValue="302a" maxValue="302f"/>
            <g:charCode value="3099"/>
            <g:charCode value="309a"/>
        </g:charClass>
    </g:token>
    <g:token name="Digit" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Digit" show="no">
        <g:charClass>
            <g:charCodeRange minValue="0030" maxValue="0039"/>
            <g:charCodeRange minValue="0660" maxValue="0669"/>
            <g:charCodeRange minValue="06f0" maxValue="06f9"/>
            <g:charCodeRange minValue="0966" maxValue="096f"/>
            <g:charCodeRange minValue="09e6" maxValue="09ef"/>
            <g:charCodeRange minValue="0a66" maxValue="0a6f"/>
            <g:charCodeRange minValue="0ae6" maxValue="0aef"/>
            <g:charCodeRange minValue="0b66" maxValue="0b6f"/>
            <g:charCodeRange minValue="0be7" maxValue="0bef"/>
            <g:charCodeRange minValue="0c66" maxValue="0c6f"/>
            <g:charCodeRange minValue="0ce6" maxValue="0cef"/>
            <g:charCodeRange minValue="0d66" maxValue="0d6f"/>
            <g:charCodeRange minValue="0e50" maxValue="0e59"/>
            <g:charCodeRange minValue="0ed0" maxValue="0ed9"/>
            <g:charCodeRange minValue="0f20" maxValue="0f29"/>
        </g:charClass>
    </g:token>
    <g:token name="Extender" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Extender" xgc-id="xml-version" show="no">
        <g:charClass>
            <g:charCode value="00b7"/>
            <g:charCode value="02d0"/>
            <g:charCode value="02d1"/>
            <g:charCode value="0387"/>
            <g:charCode value="0640"/>
            <g:charCode value="0e46"/>
            <g:charCode value="0ec6"/>
            <g:charCode value="3005"/>
            <g:charCodeRange minValue="3031" maxValue="3035"/>
            <g:charCodeRange minValue="309d" maxValue="309e"/>
            <g:charCodeRange minValue="30fc" maxValue="30fe"/>
        </g:charClass>
    </g:token>
    <g:token name="CommentStart" token-kind="skip" inline="true" comment-id="comments">
        <g:string>(:</g:string>
    </g:token>
    <g:token name="CommentEnd" token-kind="skip" inline="true">
        <g:string>:)</g:string>
    </g:token>
    <g:token name="CommentContent" token-kind="skip" inline="true">
        <g:ref name="Char"/>
    </g:token>
    <g:token name="ImplicitlyAllowedWhitespace" token-kind="skip" show="no">
        <g:oneOrMore>
            <g:ref name="WhitespaceChar"/>
        </g:oneOrMore>
    </g:token>
    <!-- ================================================
       These states define the lex-time disambiguations of tokens.  The are
       probably non-normative.
  ================================================ -->
    <g:state-list>
        <g:state name="ANY" show="no">
            <g:description>This state is for very general patterns that can be
                recognized in any state, but are not recognized as significant
                patterns by themselves in the grammar. </g:description>
            <g:transition>
                <g:description>No state change.</g:description>
                <g:tref name="WhitespaceChar"/>
                <g:tref name="Nmstart"/>
                <g:tref name="NCNameTok"/>
                <g:tref name="Nmchar"/>
                <g:tref name="LocalPart"/>
                <g:tref name="Digits"/>
                <g:tref name="Letter"/>
                <g:tref name="BaseChar"/>
                <g:tref name="Ideographic"/>
                <g:tref name="CombiningChar"/>
                <g:tref name="Digit"/>
                <g:tref name="Extender"/>
                <g:tref name="HexDigits"/>
                <g:tref name="Comment"/>
                <g:tref name="Char" if="xpath1 xpath20 xpath30 xslt2-patterns"/>
            </g:transition>
        </g:state>
        <g:state name="DEFAULT">
            <g:description>XXX</g:description>
            <g:transition next-state="EXPR_COMMENT" action="pushState">
                <g:tref name="CommentStart"/>
            </g:transition>
            <g:transition next-state="DEFAULT" action="pushState" if="xpath1 xpath20 xpath30 xslt2-patterns">
                <g:tref name="LeftAngleBracket"/>
            </g:transition>
            <g:transition action="popState">
                <g:tref name="Rbrace"/>
            </g:transition>
            <g:transition next-state="DEFAULT" action="pushState">
                <g:tref name="Lbrace"/>
            </g:transition>
            <g:transition>
                <g:tref name="ImplicitlyAllowedWhitespace"/>
                <g:tref name="Slash"/>
                <g:tref name="SlashSlash"/>
                <g:tref name="IntegerLiteral"/>
                <g:tref name="DecimalLiteral"/>
                <g:tref name="StringLiteral"/>
                <g:tref name="QNameToken"/>
                <g:tref name="NCNameColonStar"/>
                <g:tref name="StarColonNCName"/>
                <g:tref name="NumericLiteralError"/>
                <g:tref name="Minus"/>
                <g:tref name="Plus"/>
            </g:transition>
        </g:state>
        <g:state name="EXPR_COMMENT">
            <g:description>The "(:" token marks the beginning of an expression
                Comment, and the ":)" token marks the end. This allows no special
                interpretation of other characters in this state.</g:description>
            <g:transition action="popState">
                <g:tref name="CommentEnd"/>
            </g:transition>
            <g:transition next-state="EXPR_COMMENT" action="pushState">
                <g:tref name="CommentStart"/>
            </g:transition>
            <g:transition>
                <g:description>No state change.</g:description>
                <g:tref name="CommentContent"/>
            </g:transition>
        </g:state>
        <!-- states pertaining to DirElemConstructor: -->
        <!-- state pertaining to DirCommentConstructor: -->
        <!-- states pertaining to DirPIConstructor: -->
        <!-- state pertaining to CDataSection: -->
        <!-- states pertaining to Pragma: -->
    </g:state-list>
</g:grammar>

